<div class="container w-50 p-3">

    <div class="row mx-auto" >
        <div>
            <h1  style="color:blue; font-size: 30px;">Formulario de carga de productos</h1>
        </div>

        <form class="rounded" style="background-color: rgba(94, 169, 138, 1); justify-content: center;" id="form1" action="/products" method="post">
            
            
            <div class="d-flex justify-content-center">
                <h2 class="mt-4">Lista de productos</h2>
            </div>
            

            <table class="table table-dark">
                <thead>
                    <tr>
                        <th >Nombre</th>
                        <th >Precio</th>
                        <th >Imagen</th>
                    </tr>
                </thead>
                <tbody id="table-body">
                    
                </tbody>
            
            </table>

            <div class="d-flex justify-content-center" id="whitoutProducts">

            </div>
        
            
            <br/>
        
        </form>
    </div>
    <br/><br/>


    <div class="row mx-auto">
        
        <h2 style="color:blue; font-size: 30px;">Centro de mensajes</h2>
        <h3 style="color:blue; font-size: 30px;" id="mensajeCompresion"></h3>


        <form class="rounded" style="background-color: rgba(94, 169, 138, 1)">

            <div>
                <span style="font-size: 20px;"><u>Historial de mensajes:</u></span>
                <br/>
                <br/>
                <ul class="rounded" style="background:rgb(223, 223, 223)" id="messages">

                </ul>
                <div class="d-flex justify-content-center" id="whitoutMessages">

                </div>
            </div>

            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Ingres치 tu email" required>
                
            </div>
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" class="form-control" id="nombre" aria-describedby="emailHelp" placeholder="Ingresa tu nombre" required>
                
            </div>
            <div class="mb-3">
                <label for="apellido" class="form-label">Apellido</label>
                <input type="text" class="form-control" id="apellido" aria-describedby="emailHelp" placeholder="Ingresa tu apellido" required>
                
            </div>
            <div class="mb-3">
                <label for="edad" class="form-label">Edad</label>
                <input type="number" class="form-control" id="edad" aria-describedby="emailHelp" placeholder="Ingresa tu edad" required>
                
            </div>
            <div class="mb-3">
                <label for="alias" class="form-label">Alias</label>
                <input type="text" class="form-control" id="alias" aria-describedby="emailHelp" placeholder="alias" required>
                
            </div>
            <div class="mb-3">
                <label for="avatar" class="form-label">Avatar</label>
                <input type="avatar" class="form-control" id="avatar" aria-describedby="emailHelp" placeholder="avatar" required>
                
            </div>
            <div class="mb-3">
                <label for="mensaje" class="form-label">Mensaje:</label>
                <input type="text" class="form-control" id="mensaje" aria-describedby="emailHelp" placeholder="Ingres치 tu mensaje" required>
            </div>
            <div id="emptyMessage">

            </div>
            <button type="submit" id="submitMensaje" class="btn btn-primary">Enviar</button>
            <br/>
            <br/>
        </form>

    </div>

</div>



<script>

    //se toman los elementos del html
    const socket = io();
    const btnMensaje = document.getElementById('submitMensaje');
    //desnormalizar
    const schemaAuthor = new normalizr.schema.Entity('author', {}, { idAttribute: 'id' });
    const schemaMensaje = new normalizr.schema.Entity('post', { author: schemaAuthor }, { idAttribute: '_id' })
    const schemaMensajes = new normalizr.schema.Entity('posts', { mensajes: [ schemaMensaje ] }, { idAttribute: 'id' })
  
    //evento del boton de envio de mensajes
    btnMensaje.addEventListener('click', (evt) => {
        evt.preventDefault();
        const email = document.getElementById('email').value;
        const mensaje = document.getElementById('mensaje').value;
        const nombre = document.getElementById('nombre').value;
        const apellido = document.getElementById('apellido').value;
        const edad = document.getElementById('edad').value;
        const alias = document.getElementById('alias').value;
        const avatar = document.getElementById('avatar').value;
        
        if (email !== '' && mensaje !== '') {
        
            const mensaje = {
                author: {
                    email: email,
                    nombre: nombre,
                    apellido: apellido,
                    edad: edad,
                    alias: alias,
                    avatar: avatar
                },
                text: mensaje,
                date: new Date().toLocaleString()
            }


            socket.emit('nuevoMensaje', mensaje)
            const div = document.getElementById("emptyMessage");
            div.remove();
        }
        else{
            const div = document.getElementById("emptyMessage");
            div.innerHTML = "<p style=color:red >Los campos deben estar completos</p>"
        }

        document.getElementById('email').value = "";
        document.getElementById('mensaje').value = "";
        
    })
    
    
    
    //escucha la lista actualizada cuando se carga un mensaje del servidor y lo muestra en la plantilla
    socket.on('listaMensajesActualizada', (data) => {
        
        let mensajesNsize = JSON.stringify(data).length
        console.log(data, mensajesNsize);

        let mensajesD = normalizr.denormalize(data.result, schemaMensajes, data.entities)

        let mensajesDsize = JSON.stringify(mensajesD).length
        console.log(mensajesD, mensajesDsize);

        let porcentajeC = parseInt((mensajesNsize * 100) / mensajesDsize)
        console.log(`Porcentaje de compresi칩n ${porcentajeC}%`)
        document.getElementById('mensajeCompresion').innerText = porcentajeC+"%"

        console.log(mensajesD.mensajes);
        

        data=mensajesD.mensajes;

        const mensasjes = data.map(item => `<li style= "color: brown ; list-style:none" > <b style= "color: blue">${item.email}</b>  [${item.date}]:  <i style= "color: green">${item.message}</i></li>`);
        const ul = document.getElementById("messages");
        ul.innerHTML=mensasjes.join("")
    })
    
    //escucha la lista de mensajes guardadas desde el servidor y los muestra
    socket.on('listaMensajesBienvenida', (data) => {
        console.log(data);
        let mensajesNsize = JSON.stringify(data).length
        console.log(data, mensajesNsize);

        let mensajesD = normalizr.denormalize(data.result, schemaMensajes, data.entities)

        let mensajesDsize = JSON.stringify(mensajesD).length
        console.log(mensajesD, mensajesDsize);

        let porcentajeC = parseInt((mensajesNsize * 100) / mensajesDsize)
        console.log(`Porcentaje de compresi칩n ${porcentajeC}%`)
        document.getElementById('mensajeCompresion').innerText = porcentajeC+"%"

        console.log("esto es mensaje D:  " + mensajesD.mensajes);

        data=mensajesD.mensajes;
        
        const mensasjes = data.map(item => `<li style= "color: brown ; list-style:none" > <b style= "color: blue">${item.email}</b>  [${item.date}]:  <i style= "color: green">${item.message}</i></li>`);
        const ul = document.getElementById("messages");
        ul.innerHTML=mensasjes.join("")
        
    })
    
    //escucha la lista actualizada de productos cuando se agrega uno del servidor y lo muestra en la plantilla
    socket.on('listaActualizada', (data) => {

        console.log(data)
        const productos = data.map(item => `<tr> <td>${item.title}</td> <td>$${item.price}</td> <td><img src="${item.thumbnail}" height=30px></td> </tr>`);
        const tbody = document.getElementById("table-body");
        tbody.innerHTML=productos.join("")

        const div = document.getElementById("whitoutProducts");
        div.remove()
    })
    
    //escucha la lista de productos guardadas desde el servidor y los muestra
    socket.on('bienvenidoLista', (data) => {
        console.log(data)
        if(data.length>0){
            const productos = data.map(item => `<tr> <td>${item.title}</td> <td>$${item.price}</td> <td><img src="${item.thumbnail}" height=30px></td> </tr>`);
            const tbody = document.getElementById("table-body");
            tbody.innerHTML=productos.join("")
        }else{
            const div = document.getElementById("whitoutProducts");
            div.innerHTML = "<h3>No hay productos cargados</h3>"
        }
        
        
    })
        

</script>